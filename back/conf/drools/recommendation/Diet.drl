package drools.recommendation;

import drools.recommendation.Recipe;
import drools.recommendation.Ingredient;
import drools.recommendation.IngredientType;
import drools.recommendation.RecipeIngredient;
import java.util.Map.Entry;

rule "Mark vegetarian recipes"
agenda-group "Conclusion"
no-loop
when
    $recipe: Recipe($ingredients: ingredients)
    Number($nonVegetarianIngredients: intValue == 0) from accumulate(
        RecipeIngredient($ing: ingredient, $ing.getType() == IngredientType.Meat) from $ingredients,
        count($ing)
    )
then
    modify($recipe) { setVegetarian(true) }
end

rule "Mark vegan recipes" extends "Mark vegetarian recipes"
agenda-group "Conclusion"
no-loop
when
    Number($nonVeganIngredients: intValue == 0) from accumulate(
            RecipeIngredient($ing: ingredient, $ing.getType() == IngredientType.Dairy || $ing.getType() == IngredientType.Eggs) from $ingredients,
            count($ing)
    )
then
    modify($recipe) { setVegan(true) }
end

rule "Mark recipe as junk food"
agenda-group "Conclusion"
no-loop
when
    $r: Recipe($id: id, $ingredients: ingredients, $servings: servings)
    accumulate(
        RecipeIngredient($i: ingredient, $amount: amount, $unit: unit) from $ingredients,
        $carbs: sum(((($i.getCarbs()) / 100.0) * $amount * $unit.getProportion()) / $servings),
        $fats: sum(((($i.getFats()) / 100.0) * $amount * $unit.getProportion()) / $servings),
        $protein: sum(((($i.getProtein()) / 100.0) * $amount * $unit.getProportion()) / $servings),
        $calories: sum(((($i.getFats() * 9.0 + $i.getCarbs() * 4.0 + $i.getProtein() * 4.0) / 100.0) * $amount * $unit.getProportion()) / $servings)
    )    
    eval($calories >= 500.0)
    eval($carbs + $fats >= 100.0)
    eval($protein < 5.0)
then
    modify($r) { setJunkFood(true); }
    System.out.printf("Carbs: %s, fats: %s, protein: %s, calories: %s\n", $carbs, $fats, $protein, $calories);
    System.out.printf("Recipe %s is junk food.\n", $id);
end
