package drools.recommendation;

import drools.recommendation.Recipe;
import drools.recommendation.Ingredient;
import drools.recommendation.IngredientType;


rule "Mark vegetarian recipes"
agenda-group "Diet"
no-loop
when
    $recipe: Recipe($ingredients: ingredients.keySet())
    Number($nonVegetarianIngredients: intValue == 0) from accumulate(
        Ingredient($t: this, $type: type, $type == IngredientType.Meat) from $ingredients,
        count($t)
    )
then
    modify($recipe) { setVegetarian(true) }
end

rule "Mark vegan recipes" extends "Mark vegetarian recipes"
agenda-group "Diet"
no-loop
when
    Number($nonVeganIngredients: intValue == 0) from accumulate(
            Ingredient($t: this, $type: type, $type == IngredientType.Dairy || $type == IngredientType.Eggs) from $ingredients,
            count($t)
    )
then
    modify($recipe) { setVegan(true) }
end

rule "Mark recipe as junk food"
agenda-group "Diet"
when
    $r: Recipe($id: id, $ingredients: ingredients.keySet(), $servings: servings, $quantity: ingredients.values())
    Number($rCalories: doubleValue) from accumulate(
        Ingredient($fats: fats, $carbs: carbs, $protein: protein) from $ingredients,
        init(double calories = 0.0;),
        action(calories += $fats * 9 + $carbs * 4 + $protein * 4;),
        result(calories)
    )
    Number($rGrams: doubleValue) from accumulate(
        Quantity($grams: grams) from $quantity,
        sum($grams)
    )
then 
    System.out.printf("%s \n", $rCalories);
end
