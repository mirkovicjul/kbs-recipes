package drools.recommendation;

import drools.recommendation.Recipe;
import drools.recommendation.Ingredient;
import drools.recommendation.IngredientType;
import drools.conclusion.EatingUnhealthy;

rule "User is eating unhealthy"
agenda-group "Conclusions"
when
    $u: User($id: id)
    Number(intValue >= 3) from accumulate(
       MadeRecipe(
           $t: this,
           $r: recipe,
           $r.junkFood == true,
           madeDate.isAfter(LocalDate.now().minusDays(10))) from entry-point "history",
       count($t)
    )
then
    System.out.println($id + " user is eating unhealthy");
    insert(new EatingUnhealthy($id));
end

rule "Remove unhealthy food if user is eating unhealthy"
no-loop
when
    User($id: id)
    EatingUnhealthy(userId == $id)
    $unhealthyRecipes: List() from accumulate(
        Recipe($rId: id, junkFood == true),
        collectList($rId)
    )
    $unhealthyRecommendations: List(size > 0) from accumulate(
        Recommendation($t: this, $recipeId: recipeId, $recipeId memberOf $unhealthyRecipes),
        collectList($t)
    )
then
    $unhealthyRecommendations.forEach(r -> delete(r));
    System.out.printf("Remove unhealthy recipes(%s) from recommendations for user %s.\n", $unhealthyRecommendations, $id);
end

rule "Increase possibility of recommending recipe which user has been making in the past(6 mo ago or more)"
agenda-group "Recommendation"
no-loop
when
    $recipe: Recipe($id: id)
    Number(intValue >= 3) from accumulate(
        MadeRecipe($t: this, recipe.id == $id, madeDate.isBefore(LocalDate.now().minusMonths(6))) from entry-point "history",
        count($t)
    )
    Number(intValue == 0) from accumulate(
        MadeRecipe($t: this, recipe.id == $id, madeDate.isAfter(LocalDate.now().minusMonths(6))) from entry-point "history",
        count($t)
    )
then
    insert(new Recommendation($id, 5));
    System.out.printf("Increase hit for %s recipe.\n", $id);
end

rule "Remove recommendations of recipes which user made minimum 6 times in last 2 months(recently)"
agenda-group "Recommendation"
when
    $recipe: Recipe($id: id)
    Number(intValue > 5) from accumulate(
        MadeRecipe($t: this, recipe.id == $id, madeDate.isAfter(LocalDate.now().minusMonths(2))) from entry-point "history",
        count($t)
    )
then
    insert(new Recommendation($id, -5));
    System.out.printf("We should remove %s recipe from recommendations.\n", $id);
end
