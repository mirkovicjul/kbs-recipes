package drools.recommendation.homepage;

import drools.recommendation.Recipe;
import drools.recommendation.Recommendation;
import drools.recommendation.User;
import drools.recommendation.Ingredient;
import drools.recommendation.StorageItem;
import java.time.LocalDate;
import java.time.temporal.ChronoUnit;

import java.util.List;

query "SimpleResults"
  Number($maxHit: intValue) from accumulate(
      Recommendation($hit: hit),
      max($hit)
  )
  $recommendation: Recommendation(hit == $maxHit)
end

// TODO: query search top 5 results

rule "Recipes with ingredients which user likes"
    salience 100
    when
        $recipe: Recipe($id: id, $ingredients: ingredients.keySet())
        $user: User($likes: likes, $allergies: allergies, $unavailable: unavailable)
        Number($value: intValue >= 1) from accumulate(
                	Ingredient($t: this, this memberOf $ingredients) from $likes,
                	count($t)
        )
        not Ingredient(this memberOf $ingredients) from $allergies and
        not Ingredient(this memberOf $ingredients) from $unavailable
    then
        insert(new Recommendation($id, $value*10));
end

rule "Lower the possibility of recommending a recipe with ingredients which user dislikes"
    salience 99
    no-loop
    when
        $recommendation: Recommendation($id: recipeId, $hit: hit)
        $recipe: Recipe(id == $id, $ingredients: ingredients.keySet())
        $user: User($dislikes: dislikes)
        Number($value: intValue >= 1) from accumulate(
                Ingredient($t: this, this memberOf $ingredients) from $dislikes,
                count($t)
        )
    then
        $recommendation.setHit($hit - $value*20);
        update($recommendation);
end

rule "Expiration ingredients"
    salience 98
when
    $user: User($storage: storage)
    $expiration: StorageItem($ingredient: ingredient, $bestBefore: bestBefore) from $storage
    Number($bestUntil: intValue >= 0 && <= 30) from ChronoUnit.DAYS.between(LocalDate.now(), $bestBefore)
    $recipe: Recipe($id: id, $ingredients: ingredients.keySet(), $ingredient memberOf $ingredients)
then
    insert(new Recommendation($id, $bestUntil));
    System.out.printf("Increase hit by %s for recipe '%s'\n", $bestUntil, $recipe.getId());
end

rule "Collect recommendations"
    no-loop
when
    $recipe: Recipe($id: id)
    $recommendations: List(size > 1) from collect(Recommendation(recipeId == $id))
    Number($hit: intValue) from accumulate(
        Recommendation($partialHit: hit) from $recommendations,
        sum($partialHit)
    )
then
    System.out.printf("Collecting recipe %s, hit %s\n", $id, $hit);
    $recommendations.forEach(r -> delete(r));
    insert(new Recommendation($id, $hit));
end

rule "Collect same recommendations"
    salience 5
    no-loop
    enabled false
when
    $recipe: Recipe($id: id)
    Number($hit: intValue) from accumulate(
        Recommendation(recipeId == $id, $partialHit: hit),
        sum($partialHit)
    )
then
    System.out.printf("Max hit for %s is %s\n", $id, $hit);
    insert(new Recommendation($id, $hit));
end

rule "Delete all non max recommendation"
    enabled false
    salience 2
when
    $recipe: Recipe($id: id)
    Number($maxHit: intValue) from accumulate(
        Recommendation(recipeId == $id, $hit: hit),
        max($hit)
    )
    $recommendation: Recommendation(recipeId == $id, hit != $maxHit)
then
    System.out.printf("Delete %s %s\n", $id, $maxHit);
    delete($recommendation);
end